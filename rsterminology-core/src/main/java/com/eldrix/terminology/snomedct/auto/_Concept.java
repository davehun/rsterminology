package com.eldrix.terminology.snomedct.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;
import org.apache.cayenne.exp.Property;

import com.eldrix.terminology.snomedct.Concept;
import com.eldrix.terminology.snomedct.Description;
import com.eldrix.terminology.snomedct.Relationship;

/**
 * Class _Concept was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Concept extends CayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CONCEPT_ID_PK_COLUMN = "concept_id";

    public static final Property<Long> CONCEPT_ID = new Property<Long>("conceptId");
    public static final Property<Integer> CONCEPT_STATUS_CODE = new Property<Integer>("conceptStatusCode");
    public static final Property<String> CTV_ID = new Property<String>("ctvId");
    public static final Property<String> FULLY_SPECIFIED_NAME = new Property<String>("fullySpecifiedName");
    public static final Property<Integer> IS_PRIMITIVE = new Property<Integer>("isPrimitive");
    public static final Property<String> SNOMED_ID = new Property<String>("snomedId");
    public static final Property<List<Relationship>> CHILD_RELATIONSHIPS = new Property<List<Relationship>>("childRelationships");
    public static final Property<List<Description>> DESCRIPTIONS = new Property<List<Description>>("descriptions");
    public static final Property<List<Relationship>> PARENT_RELATIONSHIPS = new Property<List<Relationship>>("parentRelationships");
    public static final Property<List<Concept>> RECURSIVE_CHILD_CONCEPTS = new Property<List<Concept>>("recursiveChildConcepts");
    public static final Property<List<Concept>> RECURSIVE_PARENT_CONCEPTS = new Property<List<Concept>>("recursiveParentConcepts");

    public void setConceptId(Long conceptId) {
        writeProperty("conceptId", conceptId);
    }
    public Long getConceptId() {
        return (Long)readProperty("conceptId");
    }

    public void setConceptStatusCode(Integer conceptStatusCode) {
        writeProperty("conceptStatusCode", conceptStatusCode);
    }
    public Integer getConceptStatusCode() {
        return (Integer)readProperty("conceptStatusCode");
    }

    public void setCtvId(String ctvId) {
        writeProperty("ctvId", ctvId);
    }
    public String getCtvId() {
        return (String)readProperty("ctvId");
    }

    public void setFullySpecifiedName(String fullySpecifiedName) {
        writeProperty("fullySpecifiedName", fullySpecifiedName);
    }
    public String getFullySpecifiedName() {
        return (String)readProperty("fullySpecifiedName");
    }

    public void setIsPrimitive(Integer isPrimitive) {
        writeProperty("isPrimitive", isPrimitive);
    }
    public Integer getIsPrimitive() {
        return (Integer)readProperty("isPrimitive");
    }

    public void setSnomedId(String snomedId) {
        writeProperty("snomedId", snomedId);
    }
    public String getSnomedId() {
        return (String)readProperty("snomedId");
    }

    public void addToChildRelationships(Relationship obj) {
        addToManyTarget("childRelationships", obj, true);
    }
    public void removeFromChildRelationships(Relationship obj) {
        removeToManyTarget("childRelationships", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Relationship> getChildRelationships() {
        return (List<Relationship>)readProperty("childRelationships");
    }


    public void addToDescriptions(Description obj) {
        addToManyTarget("descriptions", obj, true);
    }
    public void removeFromDescriptions(Description obj) {
        removeToManyTarget("descriptions", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Description> getDescriptions() {
        return (List<Description>)readProperty("descriptions");
    }


    public void addToParentRelationships(Relationship obj) {
        addToManyTarget("parentRelationships", obj, true);
    }
    public void removeFromParentRelationships(Relationship obj) {
        removeToManyTarget("parentRelationships", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Relationship> getParentRelationships() {
        return (List<Relationship>)readProperty("parentRelationships");
    }


    public void addToRecursiveChildConcepts(Concept obj) {
        addToManyTarget("recursiveChildConcepts", obj, true);
    }
    public void removeFromRecursiveChildConcepts(Concept obj) {
        removeToManyTarget("recursiveChildConcepts", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Concept> getRecursiveChildConcepts() {
        return (List<Concept>)readProperty("recursiveChildConcepts");
    }


    public void addToRecursiveParentConcepts(Concept obj) {
        addToManyTarget("recursiveParentConcepts", obj, true);
    }
    public void removeFromRecursiveParentConcepts(Concept obj) {
        removeToManyTarget("recursiveParentConcepts", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Concept> getRecursiveParentConcepts() {
        return (List<Concept>)readProperty("recursiveParentConcepts");
    }


}
