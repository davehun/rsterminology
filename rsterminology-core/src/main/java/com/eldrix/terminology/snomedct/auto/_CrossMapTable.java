package com.eldrix.terminology.snomedct.auto;

import java.util.Date;

import org.apache.cayenne.CayenneDataObject;
import org.apache.cayenne.exp.Property;

import com.eldrix.terminology.snomedct.Concept;
import com.eldrix.terminology.snomedct.CrossMapSet;
import com.eldrix.terminology.snomedct.CrossMapTarget;

/**
 * Class _CrossMapTable was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CrossMapTable extends CayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CONCEPT_ID_PK_COLUMN = "concept_id";
    public static final String OPTION_PK_COLUMN = "option";
    public static final String SET_ID_PK_COLUMN = "set_id";

    public static final Property<String> ADVICE = new Property<String>("advice");
    public static final Property<Long> CONCEPT_ID = new Property<Long>("conceptId");
    public static final Property<Date> DATE_UPDATED = new Property<Date>("dateUpdated");
    public static final Property<Long> MAP_SET_ID = new Property<Long>("mapSetId");
    public static final Property<Integer> OPTION = new Property<Integer>("option");
    public static final Property<Integer> PRIORITY = new Property<Integer>("priority");
    public static final Property<String> RULE = new Property<String>("rule");
    public static final Property<Long> TARGET_ID = new Property<Long>("targetId");
    public static final Property<Concept> CONCEPT = new Property<Concept>("concept");
    public static final Property<CrossMapSet> SET = new Property<CrossMapSet>("set");
    public static final Property<CrossMapTarget> TARGET = new Property<CrossMapTarget>("target");

    public void setAdvice(String advice) {
        writeProperty("advice", advice);
    }
    public String getAdvice() {
        return (String)readProperty("advice");
    }

    public void setConceptId(Long conceptId) {
        writeProperty("conceptId", conceptId);
    }
    public Long getConceptId() {
        return (Long)readProperty("conceptId");
    }

    public void setDateUpdated(Date dateUpdated) {
        writeProperty("dateUpdated", dateUpdated);
    }
    public Date getDateUpdated() {
        return (Date)readProperty("dateUpdated");
    }

    public void setMapSetId(Long mapSetId) {
        writeProperty("mapSetId", mapSetId);
    }
    public Long getMapSetId() {
        return (Long)readProperty("mapSetId");
    }

    public void setOption(Integer option) {
        writeProperty("option", option);
    }
    public Integer getOption() {
        return (Integer)readProperty("option");
    }

    public void setPriority(Integer priority) {
        writeProperty("priority", priority);
    }
    public Integer getPriority() {
        return (Integer)readProperty("priority");
    }

    public void setRule(String rule) {
        writeProperty("rule", rule);
    }
    public String getRule() {
        return (String)readProperty("rule");
    }

    public void setTargetId(Long targetId) {
        writeProperty("targetId", targetId);
    }
    public Long getTargetId() {
        return (Long)readProperty("targetId");
    }

    public void setConcept(Concept concept) {
        setToOneTarget("concept", concept, true);
    }

    public Concept getConcept() {
        return (Concept)readProperty("concept");
    }


    public void setSet(CrossMapSet set) {
        setToOneTarget("set", set, true);
    }

    public CrossMapSet getSet() {
        return (CrossMapSet)readProperty("set");
    }


    public void setTarget(CrossMapTarget target) {
        setToOneTarget("target", target, true);
    }

    public CrossMapTarget getTarget() {
        return (CrossMapTarget)readProperty("target");
    }


}
